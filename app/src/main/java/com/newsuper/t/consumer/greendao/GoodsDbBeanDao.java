package com.newsuper.t.consumer.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.newsuper.t.consumer.bean.GoodsDbBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS_DB_BEAN".
*/
public class GoodsDbBeanDao extends AbstractDao<GoodsDbBean, Long> {

    public static final String TABLENAME = "GOODS_DB_BEAN";

    /**
     * Properties of entity GoodsDbBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ShopId = new Property(1, String.class, "shopId", false, "SHOP_ID");
        public final static Property GoodsId = new Property(2, String.class, "goodsId", false, "GOODS_ID");
        public final static Property Nature = new Property(3, String.class, "nature", false, "NATURE");
        public final static Property GoodsInfo = new Property(4, String.class, "goodsInfo", false, "GOODS_INFO");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property Index = new Property(6, String.class, "index", false, "INDEX");
    }


    public GoodsDbBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsDbBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS_DB_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SHOP_ID\" TEXT," + // 1: shopId
                "\"GOODS_ID\" TEXT," + // 2: goodsId
                "\"NATURE\" TEXT," + // 3: nature
                "\"GOODS_INFO\" TEXT," + // 4: goodsInfo
                "\"TYPE\" TEXT," + // 5: type
                "\"INDEX\" TEXT);"); // 6: index
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS_DB_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodsDbBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindString(2, shopId);
        }
 
        String goodsId = entity.getGoodsId();
        if (goodsId != null) {
            stmt.bindString(3, goodsId);
        }
 
        String nature = entity.getNature();
        if (nature != null) {
            stmt.bindString(4, nature);
        }
 
        String goodsInfo = entity.getGoodsInfo();
        if (goodsInfo != null) {
            stmt.bindString(5, goodsInfo);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String index = entity.getIndex();
        if (index != null) {
            stmt.bindString(7, index);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodsDbBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindString(2, shopId);
        }
 
        String goodsId = entity.getGoodsId();
        if (goodsId != null) {
            stmt.bindString(3, goodsId);
        }
 
        String nature = entity.getNature();
        if (nature != null) {
            stmt.bindString(4, nature);
        }
 
        String goodsInfo = entity.getGoodsInfo();
        if (goodsInfo != null) {
            stmt.bindString(5, goodsInfo);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String index = entity.getIndex();
        if (index != null) {
            stmt.bindString(7, index);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GoodsDbBean readEntity(Cursor cursor, int offset) {
        GoodsDbBean entity = new GoodsDbBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // shopId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // goodsId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nature
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // goodsInfo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // index
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodsDbBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setShopId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGoodsId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNature(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGoodsInfo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIndex(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GoodsDbBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GoodsDbBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GoodsDbBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
